!is.null(latest_condition_start_date)) {
checkmate::assertTRUE(latest_condition_start_date >= earliest_condition_start_date)
}
if (!is.null(min_days_to_condition_end) &
!is.null(max_days_to_condition_end)) {
checkmate::assertTRUE(max_days_to_condition_end >= min_days_to_condition_end)
}
if (!is.null(earliest_visit_start_date) &
!is.null(latest_visit_start_date)) {
checkmate::assertTRUE(latest_visit_start_date >= earliest_visit_start_date)
}
if (!is.null(min_days_to_visit_end) &
!is.null(max_days_to_visit_end)) {
checkmate::assertTRUE(max_days_to_visit_end >= min_days_to_visit_end)
}
checkmate::reportAssertions(collection = errorMessage)
set.seed(seed) # set seeds
# create drug strength table
if (is.null(drug_strength)) {
drug_concept_id <-
seq(1:drug_concept_id_size) # create unique drug concept id
ingredient_concept_id <-
seq(1:ingredient_concept_id_size) # create ingredient concept id
amount_value <-
c(
rep(NA, each = ingredient_concept_id_size),
# ingredient have missing amount value
sample(c("10", "20", "30"),
drug_concept_id_size - 1,
replace = TRUE
)
) # compute amount value
amount_unit_concept_id <-
sample(c("8576"),
drug_concept_id_size,
replace = TRUE
) #  compute unit id
drug_strength <-
data.frame(
drug_concept_id = as.numeric(drug_concept_id),
ingredient_concept_id = as.numeric(
sample(ingredient_concept_id, drug_concept_id_size, replace = TRUE)
),
amount_value = as.numeric(amount_value),
amount_unit_concept_id = as.numeric(amount_unit_concept_id)
# numerator_value = numeric(),
# numerator_unit_concept_id = numeric(),
# denominator_value = numeric(),
# denominator_unit_concept_id = numeric(),
# box_size = numeric(),
# valid_start_date = as.Date(character()),
# valid_end_date = as.Date(character()),
# invalid_reason = character()
)
}
# drug_exposure
if (is.null(drug_exposure)) {
drug_exposure_id <-
as.integer(seq(1:drug_exposure_size)) # generate number of unique drug_exposure_id
person_id <-
as.integer(sample(seq(1:patient_size),
drug_exposure_size,
replace = TRUE
)) # generate number of unique patient id
drug_concept_id <-
as.integer(sample(
drug_strength$drug_concept_id,
drug_exposure_size,
replace = TRUE
)) # assign drug concept id to to each drug exposure
# generate drug exposure start date
drug_exposure_start_date <-
sample(seq(
as.Date(min_drug_exposure_start_date),
as.Date(max_drug_exposure_start_date),
by = "day"
),
drug_exposure_size,
replace = TRUE
)
# generate drug exposure end date to happens after drug exposure start date
drug_exposure_end_date <-
drug_exposure_start_date + lubridate::days(sample(c(0, 7, 14, 21, 28, 30, 60, 90),
drug_exposure_size,
replace = TRUE
))
days_supply <-
as.integer(difftime(drug_exposure_end_date, drug_exposure_start_date, units = "days"))
quantity <- days_supply + 1
# putting into drug_exposure table
drug_exposure <-
data.frame(
drug_exposure_id = as.numeric(drug_exposure_id),
person_id = as.numeric(person_id),
drug_concept_id = as.numeric(drug_concept_id),
drug_exposure_start_date = drug_exposure_start_date,
drug_exposure_end_date = drug_exposure_end_date,
quantity = as.numeric(quantity)
##  days_supply = as.numeric(days_supply)
)
}
if (is.null(person) | is.null(observation_period)) {
# person table
id <- sample(seq(1:patient_size))
# person gender
gender_id <- sample(c("8507", "8532"),
patient_size,
replace = TRUE
)
# Define earliest possible date of birth for person table
if (is.null(earliest_date_of_birth)) {
earliest_date_of_birth <- as.Date("1920-01-01")
}
# Define latest possible date of birth for person table
if (is.null(latest_date_of_birth)) {
latest_date_of_birth <- as.Date("2000-01-01")
}
DOB <- sample(seq(
as.Date(earliest_date_of_birth),
as.Date(latest_date_of_birth),
by = "day"
),
patient_size,
replace = TRUE
)
# year, month, day
DOB_year <- as.numeric(format(DOB, "%Y"))
DOB_month <- as.numeric(format(DOB, "%m"))
DOB_day <- as.numeric(format(DOB, "%d"))
# observation_period table
# create a list of observational_period_id
# define earliest and latest observation start date for obs table
# if not specified by user
if (is.null(earliest_observation_start_date)) {
earliest_observation_start_date <- as.Date("2005-01-01")
}
if (is.null(latest_observation_start_date)) {
latest_observation_start_date <- as.Date("2010-01-01")
}
obs_start_date <-
sample(seq(
as.Date(earliest_observation_start_date),
as.Date(latest_observation_start_date),
by = "day"
),
patient_size,
replace = TRUE
) # start date for the period
# define min and max day to condition end
if (is.null(min_days_to_observation_end)) {
min_days_to_observation_end <- 5000
}
if (is.null(max_days_to_observation_end)) {
max_days_to_observation_end <- 50000
}
obs_end_date <-
obs_start_date + lubridate::days(
sample(
min_days_to_observation_end:max_days_to_observation_end,
patient_size,
replace = TRUE
)
)
}
if (is.null(person) | is.null(condition_occurrence)) {
# define earliest and latest condition start date for obs table
# if not specified by user
if (is.null(earliest_condition_start_date)) {
earliest_condition_start_date <- as.Date("2005-01-01")
}
if (is.null(latest_condition_start_date)) {
latest_condition_start_date <- as.Date("2020-01-01")
}
condition_start_date <-
sample(seq(
as.Date(earliest_condition_start_date),
as.Date(latest_condition_start_date),
by = "day"
),
patient_size,
replace = TRUE
) # start date for the period
# define min and max day to condition end
if (is.null(min_days_to_condition_end)) {
min_days_to_condition_end <- 1
}
if (is.null(max_days_to_condition_end)) {
max_days_to_condition_end <- 1000
}
condition_end_date <-
condition_start_date + lubridate::days(
sample(
min_days_to_condition_end:max_days_to_condition_end,
patient_size,
replace = TRUE
)
)
c_concept_id <-
seq(1:condition_concept_id_size)
condition_concept_id <- sample(c_concept_id,
patient_size,
replace = TRUE
)
}
if (is.null(person) | is.null(visit_occurrence)) {
# define earliest and latest visit start date for obs table
# if not specified by user
if (is.null(earliest_visit_start_date)) {
earliest_visit_start_date <- as.Date("2005-01-01")
}
if (is.null(latest_visit_start_date)) {
latest_visit_start_date <- as.Date("2020-01-01")
}
visit_start_date <-
sample(seq(
as.Date(earliest_visit_start_date),
as.Date(latest_visit_start_date),
by = "day"
),
patient_size,
replace = TRUE
) # start date for the period
# define min and max day to visit end
if (is.null(min_days_to_visit_end)) {
min_days_to_visit_end <- 1
}
if (is.null(max_days_to_visit_end)) {
max_days_to_visit_end <- 1000
}
visit_end_date <-
visit_start_date + lubridate::days(
sample(
min_days_to_visit_end:max_days_to_visit_end,
patient_size,
replace = TRUE
)
)
v_concept_id <- seq(1:visit_concept_id_size)
visit_concept_id <- sample(v_concept_id,
patient_size,
replace = TRUE)
v_occurrence_id <- seq(1:visit_occurrence_id_size)
visit_occurrence_id <- sample(v_occurrence_id,
patient_size,
replace = TRUE)
}
if (is.null(person)) {
person <- tibble::tibble(
person_id = id,
gender_concept_id = gender_id,
year_of_birth = DOB_year,
month_of_birth = DOB_month,
day_of_birth = DOB_day
)
}
if (is.null(observation_period)) {
observation_period <- tibble::tibble(
observation_period_id = id,
person_id = id,
observation_period_start_date = obs_start_date,
observation_period_end_date = obs_end_date
)
}
if (is.null(condition_occurrence)) {
condition_occurrence <- tibble::tibble(
condition_occurrence_id = id,
person_id = id,
condition_concept_id = condition_concept_id,
condition_start_date = condition_start_date,
condition_end_date = condition_end_date
)
}
if (is.null(visit_occurrence)) {
id <- sample(seq(1:patient_size))
visit_occurrence <- tibble::tibble(
visit_occurrence_id = visit_occurrence_id,
person_id = id,
visit_concept_id = visit_concept_id,
visit_start_date = visit_start_date,
visit_end_date = visit_end_date
)
}
if (is.null(concept_ancestor)) {
ancestor_concept_id <-
seq(1:ancestor_concept_id_size)
descendant_concept_id <-
seq((ancestor_concept_id_size + 1):(ancestor_concept_id_size + ancestor_concept_id_size))
concept_ancestor <- data.frame(
ancestor_concept_id = as.numeric(ancestor_concept_id),
descendant_concept_id = as.numeric(descendant_concept_id)
)
}
# cohort table 1
if (is.null(cohort1)) {
cohort1 <- tibble::tibble(
cohort_definition_id = c(1, 1, 1, 2),
subject_id = c(1, 1, 2, 3),
cohort_start_date = as.Date(c("2020-01-01", "2020-06-01", "2020-01-02", "2020-01-01")),
cohort_end_date = as.Date(c("2020-04-01", "2020-08-01", "2020-02-02", "2020-03-01"))
)
}
# cohort table 2
if (is.null(cohort2)) {
cohort2 <- tibble::tibble(
cohort_definition_id = c(1, 1, 2, 3, 1),
subject_id = c(1, 3, 1, 2, 1),
cohort_start_date = as.Date(c("2019-12-30", "2020-01-01", "2020-05-25", "2020-01-01", "2020-05-25")),
cohort_end_date = as.Date(c("2019-12-30", "2020-01-01", "2020-05-25", "2020-01-01", "2020-05-25"))
)
}
# into in-memory database
db <- DBI::dbConnect(duckdb::duckdb(), ":memory:")
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "drug_strength",
drug_strength,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "drug_exposure",
drug_exposure,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "person",
person,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "observation_period",
observation_period,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "condition_occurrence",
condition_occurrence,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "visit_occurrence",
visit_occurrence,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "concept_ancestor",
concept_ancestor,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "cohort1",
cohort1,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "cohort2",
cohort2,
overwrite = TRUE
)
})
cdm <- CDMConnector::cdm_from_con(
db,
cdm_tables = c(
"drug_strength",
"drug_exposure",
"person",
"concept_ancestor",
"observation_period",
"condition_occurrence",
"visit_occurrence"
),
cohort_tables = c("cohort1", "cohort2")
)
return(cdm)
}
test_that("test initial errors", {
cdm <- mockDrugUtilisation(
person = dplyr::tibble(
person_id = c(1, 2),
year_of_birth = as.integer(c(1995, 1993)),
month_of_birth = as.integer(c(10, 11)),
day_of_birth = as.integer(c(1, 12)),
gender_concept_id = c(8532, 8507)
),
cohort1 = dplyr::tibble(
cohort_definition_id = c(1, 1, 1, 1, 2),
subject_id = c(1, 2, 3, 1, 1),
cohort_start_date = as.Date(c(
"2020-01-01", "2022-05-07", "2012-12-15", "2010-05-20", "2020-02-03"
)),
cohort_end_date = as.Date(c(
"2021-01-01", "2022-05-08", "2012-12-18", "2010-07-20", "2021-02-03"
))
)
)
expect_error(getStratification())
expect_error(getStratification(cdm = cdm))
expect_error(getStratification(cdm = cdm, targetCohortName = 1))
expect_error(getStratification(cdm = cdm, targetCohortName = NA))
expect_error(getStratification(cdm = cdm, targetCohortName = "no"))
expect_error(getStratification(cdm = cdm, targetCohortName = "cohort1"))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", targetCohortId = NA
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", targetCohortId = "1"
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", sex = "Both", targetCohortId = 3
))
x <- getStratification(
cdm = cdm, targetCohortName = "cohort1", sex = "Both", targetCohortId = 1
)
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", sex = c("Both", "Both"),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", sex = c("Both", NA),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", sex = c("Both", "x"),
targetCohortId = 1
))
x <- getStratification(
cdm = cdm, targetCohortName = "cohort1", sex = c("Both", "Male"),
targetCohortId = 1
)
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = NA,
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list("A"),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(1),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(-1, 1)),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(4, 1)),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(0, 19), c(0)),
targetCohortId = 1
))
x <- getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(0, 19), c(0, 0)),
targetCohortId = 1
)
x <- getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(0, 19), c(0, NA)),
targetCohortId = 1
)
x <- getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(0, 19), c(NA, 10)),
targetCohortId = 1
)
x <- getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(0, 19), c(NA, NA)),
targetCohortId = 1
)
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", indexYearGroup = list(),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", indexYearGroup = list("hola"),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm,
targetCohortName = "cohort1",
indexYearGroup = list(100, c(10:20), NA),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm,
targetCohortName = "cohort1",
indexYearGroup = list(100, c(10:20), as.numeric(NA)),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm,
targetCohortName = "cohort1",
indexYearGroup = list(100, c(10:20), c(20, 45)),
targetCohortId = 1
))
x <- getStratification(
cdm = cdm,
targetCohortName = "cohort1",
indexYearGroup = list(100, c(10, 20), c(20, 45)),
targetCohortId = 1
)
})
