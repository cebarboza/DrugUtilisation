descendant_concept_id <-
seq((ancestor_concept_id_size + 1):(ancestor_concept_id_size + ancestor_concept_id_size))
concept_ancestor <- data.frame(
ancestor_concept_id = as.numeric(ancestor_concept_id),
descendant_concept_id = as.numeric(descendant_concept_id)
)
}
# cohort table 1
if (is.null(cohort1)) {
cohort1 <- tibble::tibble(
cohort_definition_id = c(1, 1, 1, 2),
subject_id = c(1, 1, 2, 3),
cohort_start_date = as.Date(c("2020-01-01", "2020-06-01", "2020-01-02", "2020-01-01")),
cohort_end_date = as.Date(c("2020-04-01", "2020-08-01", "2020-02-02", "2020-03-01"))
)
}
# cohort table 2
if (is.null(cohort2)) {
cohort2 <- tibble::tibble(
cohort_definition_id = c(1, 1, 2, 3, 1),
subject_id = c(1, 3, 1, 2, 1),
cohort_start_date = as.Date(c("2019-12-30", "2020-01-01", "2020-05-25", "2020-01-01", "2020-05-25")),
cohort_end_date = as.Date(c("2019-12-30", "2020-01-01", "2020-05-25", "2020-01-01", "2020-05-25"))
)
}
# into in-memory database
db <- DBI::dbConnect(duckdb::duckdb(), ":memory:")
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "drug_strength",
drug_strength,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "drug_exposure",
drug_exposure,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "person",
person,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "observation_period",
observation_period,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "condition_occurrence",
condition_occurrence,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "visit_occurrence",
visit_occurrence,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "concept_ancestor",
concept_ancestor,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "cohort1",
cohort1,
overwrite = TRUE
)
})
DBI::dbWithTransaction(db, {
DBI::dbWriteTable(db, "cohort2",
cohort2,
overwrite = TRUE
)
})
cdm <- CDMConnector::cdm_from_con(
db,
cdm_tables = c(
"drug_strength",
"drug_exposure",
"person",
"concept_ancestor",
"observation_period",
"condition_occurrence",
"visit_occurrence"
),
cohort_tables = c("cohort1", "cohort2")
)
return(cdm)
}
test_that("test initial errors", {
cdm <- mockDrugUtilisation(
person = dplyr::tibble(
person_id = c(1, 2),
year_of_birth = as.integer(c(1995, 1993)),
month_of_birth = as.integer(c(10, 11)),
day_of_birth = as.integer(c(1, 12)),
gender_concept_id = c(8532, 8507)
),
cohort1 = dplyr::tibble(
cohort_definition_id = c(1, 1, 1, 1, 2),
subject_id = c(1, 2, 3, 1, 1),
cohort_start_date = as.Date(c(
"2020-01-01", "2022-05-07", "2012-12-15", "2010-05-20", "2020-02-03"
)),
cohort_end_date = as.Date(c(
"2021-01-01", "2022-05-08", "2012-12-18", "2010-07-20", "2021-02-03"
))
)
)
expect_error(getStratification())
expect_error(getStratification(cdm = cdm))
expect_error(getStratification(cdm = cdm, targetCohortName = 1))
expect_error(getStratification(cdm = cdm, targetCohortName = NA))
expect_error(getStratification(cdm = cdm, targetCohortName = "no"))
expect_error(getStratification(cdm = cdm, targetCohortName = "cohort1"))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", targetCohortId = NA
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", targetCohortId = "1"
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", sex = "Both", targetCohortId = 3
))
x <- getStratification(
cdm = cdm, targetCohortName = "cohort1", sex = "Both", targetCohortId = 1
)
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", sex = c("Both", "Both"),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", sex = c("Both", NA),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", sex = c("Both", "x"),
targetCohortId = 1
))
x <- getStratification(
cdm = cdm, targetCohortName = "cohort1", sex = c("Both", "Male"),
targetCohortId = 1
)
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = NA,
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list("A"),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(1),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(-1, 1)),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(4, 1)),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(0, 19), c(0)),
targetCohortId = 1
))
x <- getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(0, 19), c(0, 0)),
targetCohortId = 1
)
x <- getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(0, 19), c(0, NA)),
targetCohortId = 1
)
x <- getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(0, 19), c(NA, 10)),
targetCohortId = 1
)
x <- getStratification(
cdm = cdm, targetCohortName = "cohort1", ageGroup = list(c(0, 19), c(NA, NA)),
targetCohortId = 1
)
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", indexYearGroup = list(),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm, targetCohortName = "cohort1", indexYearGroup = list("hola"),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm,
targetCohortName = "cohort1",
indexYearGroup = list(100, c(10:20), NA),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm,
targetCohortName = "cohort1",
indexYearGroup = list(100, c(10:20), as.numeric(NA)),
targetCohortId = 1
))
expect_error(getStratification(
cdm = cdm,
targetCohortName = "cohort1",
indexYearGroup = list(100, c(10:20), c(20, 45)),
targetCohortId = 1
))
x <- getStratification(
cdm = cdm,
targetCohortName = "cohort1",
indexYearGroup = list(100, c(10, 20), c(20, 45)),
targetCohortId = 1
)
})
install.packages("purrr")
devtools::load_all()
devtools::check()
drug_strength <- dplyr::tibble(
drug_concept_id = c(1:37),
ingredient_concept_id = c(rep(1,37)),
amount_value = c(-100,200,300,400,500,600,700,rep(NA,30)),
amount = c(rep("numeric",7),rep(NA,30)),
amount_unit_concept_id = c(8718, 9655, 8576, 44819154, 9551, 8587, 9573, rep(NA,30)),
numerator_value = c(rep(NA,7),1,300,5,10,13,20,3,5,2,1,1,4,11,270,130,32,34,40,42,15,100,105,25,44,7,3,8,12,1,31),
numerator = c(rep(NA,7),rep("numeric",30)),
denominator_unit_concept_id = c(rep(NA,7),8576, 8587, 8505,8505,8587,8587,45744809,8519,8587,8576,8576,8587,8576,8587,8576,8587,8587,8505,8587,
8576,8587,45744809,8505,8519,8576,8587,8576,8587,8576,8587),
denominator_value = c(rep(NA,7),241,30,23,410,143,2,43,15,21,1,11,42,151,20,rep(NA,16)),
denominator = c(rep(NA,7),rep("numeric",14),rep(NA,16)),
numerator_unit_concept_id = c(rep(NA,7),8718,8718,9655,8576,44819154,9551,8576,8576,8576,8576,8587,8587,9573,9573,8718,8718,9439,9655,44819154,
9551,9551,8576,8576,8576,8576,8576,8587,8587,9573,9573)
)
# pattern 1 also NA because of numerator < 0, pattern 3 NA because of quantity < 0, pattern 2 calculation changes
drug_exposure <- dplyr::tibble(
drug_exposure_id = c(1,2,3,4),
person_id = c(1,1,2,3),
drug_concept_id = c(1,2,15,3),
drug_exposure_start_date = c(as.Date("2018-11-02"), as.Date("2010-04-04"), as.Date("2014-02-18"), as.Date("2014-01-07")),
drug_exposure_end_date = c(as.Date("2018-11-09"), as.Date("2010-05-02"), as.Date("2014-02-25"), as.Date("2014-01-06")),
quantity = c(8,21,8,8)
)
cdm <- mockDrugUtilisation(connectionDetails,
drug_strength = drug_strength,
drug_exposure = drug_exposure)
connectionDetails <- list(
con = DBI::dbConnect(duckdb::duckdb(), ":memory:"),
writeSchema = "main",
writePrefix = NULL
)
drug_strength <- dplyr::tibble(
drug_concept_id = c(1:37),
ingredient_concept_id = c(rep(1,37)),
amount_value = c(-100,200,300,400,500,600,700,rep(NA,30)),
amount = c(rep("numeric",7),rep(NA,30)),
amount_unit_concept_id = c(8718, 9655, 8576, 44819154, 9551, 8587, 9573, rep(NA,30)),
numerator_value = c(rep(NA,7),1,300,5,10,13,20,3,5,2,1,1,4,11,270,130,32,34,40,42,15,100,105,25,44,7,3,8,12,1,31),
numerator = c(rep(NA,7),rep("numeric",30)),
denominator_unit_concept_id = c(rep(NA,7),8576, 8587, 8505,8505,8587,8587,45744809,8519,8587,8576,8576,8587,8576,8587,8576,8587,8587,8505,8587,
8576,8587,45744809,8505,8519,8576,8587,8576,8587,8576,8587),
denominator_value = c(rep(NA,7),241,30,23,410,143,2,43,15,21,1,11,42,151,20,rep(NA,16)),
denominator = c(rep(NA,7),rep("numeric",14),rep(NA,16)),
numerator_unit_concept_id = c(rep(NA,7),8718,8718,9655,8576,44819154,9551,8576,8576,8576,8576,8587,8587,9573,9573,8718,8718,9439,9655,44819154,
9551,9551,8576,8576,8576,8576,8576,8587,8587,9573,9573)
)
# pattern 1 also NA because of numerator < 0, pattern 3 NA because of quantity < 0, pattern 2 calculation changes
drug_exposure <- dplyr::tibble(
drug_exposure_id = c(1,2,3,4),
person_id = c(1,1,2,3),
drug_concept_id = c(1,2,15,3),
drug_exposure_start_date = c(as.Date("2018-11-02"), as.Date("2010-04-04"), as.Date("2014-02-18"), as.Date("2014-01-07")),
drug_exposure_end_date = c(as.Date("2018-11-09"), as.Date("2010-05-02"), as.Date("2014-02-25"), as.Date("2014-01-06")),
quantity = c(8,21,8,8)
)
cdm <- mockDrugUtilisation(connectionDetails,
drug_strength = drug_strength,
drug_exposure = drug_exposure)
concepts <- list(
concept_1 = c(1,30,4),
concept_2 = c(300, 15),
concept_3 = c(2)
)
result <- dailyDoseCoverage(cdm, sample = 10, ingredient = 1, conceptList = concepts)
expect_true(result - 33.33333 < 0.001)
result
result <- dailyDoseCoverage(cdm, sample = 5, ingredient = 1, conceptList = concepts)
result
cdm$drug_exposure
connectionDetails <- list(
con = DBI::dbConnect(duckdb::duckdb(), ":memory:"),
writeSchema = "main",
writePrefix = NULL
)
cdm <- mockDrugUtilisation(connectionDetails)
indications <- list(headache = 378253, influenza = 4266367)
cdm <- generateConceptCohortSet(cdm, "indications_cohort", indications)
devtools::load_all()
cdm <- mockDrugUtilisation(connectionDetails)
indications <- list(headache = 378253, influenza = 4266367)
cdm <- generateConceptCohortSet(cdm, "indications_cohort", indications)
devtools::load_all()
cdm <- generateConceptCohortSet(cdm, "indications_cohort", indications)
indications <- list(headache = 378253, influenza = 4266367)
name <- "indications_cohort"
conceptSetList <- indications
daysPriorHistory = 0
gap = 0
washout = 0
offset = 0
cohortDateRange = as.Date(c(NA, NA))
# check input
checkInputs(
cdm = cdm, name = name, conceptSetList = conceptSetList,
daysPriorHistory = daysPriorHistory, gapEra = gap,
priorUseWashout = washout, offset = offset,
cohortDateRange = cohortDateRange
)
# create conceptSet
conceptSet <- conceptSetFromConceptSetList(conceptSetList)
# create cohortSet
cohortSet <- attr(conceptSet, "cohort_set") %>%
dplyr::mutate(
days_prior_history = dplyr::if_else(
is.null(.env$daysPriorHistory), NA, .env$daysPriorHistory
),
gap = .env$gap,
washout = .env$washout,
offset = .env$offset,
cohort_start_date_range = .env$cohortDateRange[1],
cohort_end_date_range = .env$cohortDateRange[2]
)
# subset tables
cohortRef <- subsetTables(cdm, conceptSet)
cohortAttritionRef <- computeCohortAttrition(cohortRef, cdm)
cohortRef
class(cohortRef)
cohortAttritionRef <- computeCohortAttrition(cohortRef, cdm)
cohortAttritionRef
# check daysPriorHistory
cohortRef <- minimumDaysPriorHistory(cohortRef, cdm, daysPriorHistory)
# check daysPriorHistory
cohortRef <- requireDaysPriorHistory(cohortRef, cdm, daysPriorHistory)
cohortAttritionRef <- addAttritionLine(
cohortRef, cohortAttritionRef, "Satisfy daysPriorHistory"
)
cohortAttritionRef <- computeCohortAttrition(
cohortRef, cdm, cohortAttritionRef, "Satisfy daysPriorHistory"
)
devtools::load_all()
# check daysPriorHistory
cohortRef <- requireDaysPriorHistory(cohortRef, cdm, daysPriorHistory)
cohortAttritionRef <- computeCohortAttrition(
cohortRef, cdm, cohortAttritionRef, "Satisfy daysPriorHistory"
)
# union overlap
cohortRef <- unionCohort(cohortRef, gap, cdm)
cohortAttritionRef <- computeCohortAttrition(
cohortRef, cdm, cohortAttritionRef, "Join records within gap distance"
)
class(cohortRef)
cdm <- mockDrugUtilisation(connectionDetails)
indications <- list(headache = 378253, influenza = 4266367)
cdm <- generateConceptCohortSet(cdm, "indications_cohort", indications)
cdm
name
conceptSetList
# check input
checkInputs(
cdm = cdm, name = name, conceptSetList = conceptSetList,
daysPriorHistory = daysPriorHistory, gapEra = gap,
priorUseWashout = washout, offset = offset,
cohortDateRange = cohortDateRange
)
# create conceptSet
conceptSet <- conceptSetFromConceptSetList(conceptSetList)
# create cohortSet
cohortSet <- attr(conceptSet, "cohort_set") %>%
dplyr::mutate(
days_prior_history = dplyr::if_else(
is.null(.env$daysPriorHistory), NA, .env$daysPriorHistory
),
gap = .env$gap,
washout = .env$washout,
offset = .env$offset,
cohort_start_date_range = .env$cohortDateRange[1],
cohort_end_date_range = .env$cohortDateRange[2]
)
# subset tables
cohortRef <- subsetTables(cdm, conceptSet)
cohortAttritionRef <- computeCohortAttrition(cohortRef, cdm)
# check daysPriorHistory
cohortRef <- requireDaysPriorHistory(cohortRef, cdm, daysPriorHistory)
cohortAttritionRef <- computeCohortAttrition(
cohortRef, cdm, cohortAttritionRef, "Satisfy daysPriorHistory"
)
# union overlap
cohortRef <- unionCohort(cohortRef, gap, cdm)
cohortAttritionRef <- computeCohortAttrition(
cohortRef, cdm, cohortAttritionRef, "Join records within gap distance"
)
func <- function(a = 1, b = 2) {
print(paste0(a, "_", b))
}
x <- names(formals(func))
x
funName <- "checkName"
varName <- c("cdm", "snap")
inputName <- "x"
paste0(funName, "(", paste0(paste0(
inputName, "[[", varName, "]]"
), collapse = ", "), ")")
xxx <- function(x) {
paste0(substitute(parse(x)))
}
a <- 1
xxx(x = 1)
xxx(x = a)
xxx <- function(x) {
paste0(substitute(x))
}
xxx(x = a)
checkColumns <- function(x, columns) {
if (!(columns %in% colnames(x))) {
cli::cli_abort(paste0(
substitute(x), "must contain:", paste0(columns, collapse = ","), "as columns"
))
}
}
a <- tibble(a = 1, x = 1)
a <- dplyr::tibble(a = 1, x = 1)
checkColumns(a, "a")
checkColumns(a, c("a", "x"))
checkColumns <- function(x, columns) {
if (!all(columns %in% colnames(x))) {
cli::cli_abort(paste0(
substitute(x), "must contain:", paste0(columns, collapse = ","), "as columns"
))
}
}
checkColumns(a, c("a", "x"))
checkColumns(a, c("a", "b"))
checkColumns <- function(x, columns) {
if (!all(columns %in% colnames(x))) {
cli::cli_abort(paste(
substitute(x), "must contain:", paste0(columns, collapse = ", "), "as columns"
))
}
}
checkColumns(a, c("a", "b"))
checkColumns(a, "b")
checkColumns <- function(x, columns) {
if (!all(columns %in% colnames(x))) {
cli::cli_abort(paste0(
substitute(x), " must contain: `", paste0(columns, collapse = "`, `"),
"` as columns"
))
}
}
checkColumns(a, "b")
library(magrittr)
# add the mock vocabulary data
mockDrugStrength <- readr::read_csv(
here::here("data-raw", "drug_strength.csv"), show_col_types = FALSE
)
mockConcept <- readr::read_csv(
here::here("data-raw", "concept.csv"), show_col_types = FALSE
)
mockConceptAncestor <- readr::read_csv(
here::here("data-raw", "concept_ancestor.csv"), show_col_types = FALSE
)
# add the information related to the different domains
domainInformation <- readr::read_csv(
here::here("data-raw", "domain_information.csv"), show_col_types = FALSE
)
# add the current pattern file
patternfile <- readr::read_csv(
here::here("data-raw", "pattern_drug_strength.csv"),
col_types = list(
pattern_id = "numeric",
amount_numeric = "numeric",
amount_unit = "character",
amount_unit_concept_id = "numeric",
numerator_numeric = "numeric",
numerator_unit = "character",
numerator_unit_concept_id = "numeric",
denominator_numeric = "numeric",
denominator_unit = "character",
denominator_unit_concept_id = "numeric",
valid = "logical",
pattern_name = "character",
unit = "character"
)
) %>%
dplyr::select(-"valid", -"pattern_name")
usethis::use_data(
mockDrugStrength, mockConcept, mockConceptAncestor, domainInformation,
patternfile, internal = TRUE, overwrite = TRUE
)
devtools::document()
devtools::document()
